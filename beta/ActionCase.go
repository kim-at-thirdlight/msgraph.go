// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// CaseCloseRequestParameter undocumented
type CaseCloseRequestParameter struct {
}

// CaseReopenRequestParameter undocumented
type CaseReopenRequestParameter struct {
}

// Custodians returns request builder for Custodian collection
func (b *CaseRequestBuilder) Custodians() *CaseCustodiansCollectionRequestBuilder {
	bb := &CaseCustodiansCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/custodians"
	return bb
}

// CaseCustodiansCollectionRequestBuilder is request builder for Custodian collection
type CaseCustodiansCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Custodian collection
func (b *CaseCustodiansCollectionRequestBuilder) Request() *CaseCustodiansCollectionRequest {
	return &CaseCustodiansCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Custodian item
func (b *CaseCustodiansCollectionRequestBuilder) ID(id string) *CustodianRequestBuilder {
	bb := &CustodianRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CaseCustodiansCollectionRequest is request for Custodian collection
type CaseCustodiansCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Custodian collection
func (r *CaseCustodiansCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Custodian, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Custodian
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Custodian
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Custodian collection, max N pages
func (r *CaseCustodiansCollectionRequest) GetN(ctx context.Context, n int) ([]Custodian, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Custodian collection
func (r *CaseCustodiansCollectionRequest) Get(ctx context.Context) ([]Custodian, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Custodian collection
func (r *CaseCustodiansCollectionRequest) Add(ctx context.Context, reqObj *Custodian) (resObj *Custodian, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LegalHolds returns request builder for LegalHold collection
func (b *CaseRequestBuilder) LegalHolds() *CaseLegalHoldsCollectionRequestBuilder {
	bb := &CaseLegalHoldsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/legalHolds"
	return bb
}

// CaseLegalHoldsCollectionRequestBuilder is request builder for LegalHold collection
type CaseLegalHoldsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for LegalHold collection
func (b *CaseLegalHoldsCollectionRequestBuilder) Request() *CaseLegalHoldsCollectionRequest {
	return &CaseLegalHoldsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for LegalHold item
func (b *CaseLegalHoldsCollectionRequestBuilder) ID(id string) *LegalHoldRequestBuilder {
	bb := &LegalHoldRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CaseLegalHoldsCollectionRequest is request for LegalHold collection
type CaseLegalHoldsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for LegalHold collection
func (r *CaseLegalHoldsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]LegalHold, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []LegalHold
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []LegalHold
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for LegalHold collection, max N pages
func (r *CaseLegalHoldsCollectionRequest) GetN(ctx context.Context, n int) ([]LegalHold, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for LegalHold collection
func (r *CaseLegalHoldsCollectionRequest) Get(ctx context.Context) ([]LegalHold, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for LegalHold collection
func (r *CaseLegalHoldsCollectionRequest) Add(ctx context.Context, reqObj *LegalHold) (resObj *LegalHold, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// NoncustodialDataSources returns request builder for NoncustodialDataSource collection
func (b *CaseRequestBuilder) NoncustodialDataSources() *CaseNoncustodialDataSourcesCollectionRequestBuilder {
	bb := &CaseNoncustodialDataSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/noncustodialDataSources"
	return bb
}

// CaseNoncustodialDataSourcesCollectionRequestBuilder is request builder for NoncustodialDataSource collection
type CaseNoncustodialDataSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for NoncustodialDataSource collection
func (b *CaseNoncustodialDataSourcesCollectionRequestBuilder) Request() *CaseNoncustodialDataSourcesCollectionRequest {
	return &CaseNoncustodialDataSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for NoncustodialDataSource item
func (b *CaseNoncustodialDataSourcesCollectionRequestBuilder) ID(id string) *NoncustodialDataSourceRequestBuilder {
	bb := &NoncustodialDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CaseNoncustodialDataSourcesCollectionRequest is request for NoncustodialDataSource collection
type CaseNoncustodialDataSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for NoncustodialDataSource collection
func (r *CaseNoncustodialDataSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]NoncustodialDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []NoncustodialDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []NoncustodialDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for NoncustodialDataSource collection, max N pages
func (r *CaseNoncustodialDataSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]NoncustodialDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for NoncustodialDataSource collection
func (r *CaseNoncustodialDataSourcesCollectionRequest) Get(ctx context.Context) ([]NoncustodialDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for NoncustodialDataSource collection
func (r *CaseNoncustodialDataSourcesCollectionRequest) Add(ctx context.Context, reqObj *NoncustodialDataSource) (resObj *NoncustodialDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for CaseOperation collection
func (b *CaseRequestBuilder) Operations() *CaseOperationsCollectionRequestBuilder {
	bb := &CaseOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// CaseOperationsCollectionRequestBuilder is request builder for CaseOperation collection
type CaseOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CaseOperation collection
func (b *CaseOperationsCollectionRequestBuilder) Request() *CaseOperationsCollectionRequest {
	return &CaseOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CaseOperation item
func (b *CaseOperationsCollectionRequestBuilder) ID(id string) *CaseOperationRequestBuilder {
	bb := &CaseOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CaseOperationsCollectionRequest is request for CaseOperation collection
type CaseOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CaseOperation collection
func (r *CaseOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CaseOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CaseOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CaseOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CaseOperation collection, max N pages
func (r *CaseOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]CaseOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CaseOperation collection
func (r *CaseOperationsCollectionRequest) Get(ctx context.Context) ([]CaseOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CaseOperation collection
func (r *CaseOperationsCollectionRequest) Add(ctx context.Context, reqObj *CaseOperation) (resObj *CaseOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReviewSets returns request builder for ReviewSet collection
func (b *CaseRequestBuilder) ReviewSets() *CaseReviewSetsCollectionRequestBuilder {
	bb := &CaseReviewSetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSets"
	return bb
}

// CaseReviewSetsCollectionRequestBuilder is request builder for ReviewSet collection
type CaseReviewSetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ReviewSet collection
func (b *CaseReviewSetsCollectionRequestBuilder) Request() *CaseReviewSetsCollectionRequest {
	return &CaseReviewSetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ReviewSet item
func (b *CaseReviewSetsCollectionRequestBuilder) ID(id string) *ReviewSetRequestBuilder {
	bb := &ReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CaseReviewSetsCollectionRequest is request for ReviewSet collection
type CaseReviewSetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ReviewSet collection
func (r *CaseReviewSetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ReviewSet, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ReviewSet
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ReviewSet
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ReviewSet collection, max N pages
func (r *CaseReviewSetsCollectionRequest) GetN(ctx context.Context, n int) ([]ReviewSet, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ReviewSet collection
func (r *CaseReviewSetsCollectionRequest) Get(ctx context.Context) ([]ReviewSet, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ReviewSet collection
func (r *CaseReviewSetsCollectionRequest) Add(ctx context.Context, reqObj *ReviewSet) (resObj *ReviewSet, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings is navigation property
func (b *CaseRequestBuilder) Settings() *SettingsRequestBuilder {
	bb := &SettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// SourceCollections returns request builder for SourceCollection collection
func (b *CaseRequestBuilder) SourceCollections() *CaseSourceCollectionsCollectionRequestBuilder {
	bb := &CaseSourceCollectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sourceCollections"
	return bb
}

// CaseSourceCollectionsCollectionRequestBuilder is request builder for SourceCollection collection
type CaseSourceCollectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SourceCollection collection
func (b *CaseSourceCollectionsCollectionRequestBuilder) Request() *CaseSourceCollectionsCollectionRequest {
	return &CaseSourceCollectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SourceCollection item
func (b *CaseSourceCollectionsCollectionRequestBuilder) ID(id string) *SourceCollectionRequestBuilder {
	bb := &SourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CaseSourceCollectionsCollectionRequest is request for SourceCollection collection
type CaseSourceCollectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SourceCollection collection
func (r *CaseSourceCollectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SourceCollection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SourceCollection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SourceCollection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SourceCollection collection, max N pages
func (r *CaseSourceCollectionsCollectionRequest) GetN(ctx context.Context, n int) ([]SourceCollection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SourceCollection collection
func (r *CaseSourceCollectionsCollectionRequest) Get(ctx context.Context) ([]SourceCollection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SourceCollection collection
func (r *CaseSourceCollectionsCollectionRequest) Add(ctx context.Context, reqObj *SourceCollection) (resObj *SourceCollection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Tags returns request builder for Tag collection
func (b *CaseRequestBuilder) Tags() *CaseTagsCollectionRequestBuilder {
	bb := &CaseTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tags"
	return bb
}

// CaseTagsCollectionRequestBuilder is request builder for Tag collection
type CaseTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Tag collection
func (b *CaseTagsCollectionRequestBuilder) Request() *CaseTagsCollectionRequest {
	return &CaseTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Tag item
func (b *CaseTagsCollectionRequestBuilder) ID(id string) *TagRequestBuilder {
	bb := &TagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CaseTagsCollectionRequest is request for Tag collection
type CaseTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Tag collection
func (r *CaseTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Tag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Tag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Tag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Tag collection, max N pages
func (r *CaseTagsCollectionRequest) GetN(ctx context.Context, n int) ([]Tag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Tag collection
func (r *CaseTagsCollectionRequest) Get(ctx context.Context) ([]Tag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Tag collection
func (r *CaseTagsCollectionRequest) Add(ctx context.Context, reqObj *Tag) (resObj *Tag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReviewSet is navigation property
func (b *CaseExportOperationRequestBuilder) ReviewSet() *ReviewSetRequestBuilder {
	bb := &ReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSet"
	return bb
}
