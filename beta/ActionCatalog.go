// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// Entries returns request builder for CatalogEntry collection
func (b *CatalogRequestBuilder) Entries() *CatalogEntriesCollectionRequestBuilder {
	bb := &CatalogEntriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/entries"
	return bb
}

// CatalogEntriesCollectionRequestBuilder is request builder for CatalogEntry collection
type CatalogEntriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CatalogEntry collection
func (b *CatalogEntriesCollectionRequestBuilder) Request() *CatalogEntriesCollectionRequest {
	return &CatalogEntriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CatalogEntry item
func (b *CatalogEntriesCollectionRequestBuilder) ID(id string) *CatalogEntryRequestBuilder {
	bb := &CatalogEntryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CatalogEntriesCollectionRequest is request for CatalogEntry collection
type CatalogEntriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CatalogEntry collection
func (r *CatalogEntriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CatalogEntry, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CatalogEntry
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CatalogEntry
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CatalogEntry collection, max N pages
func (r *CatalogEntriesCollectionRequest) GetN(ctx context.Context, n int) ([]CatalogEntry, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CatalogEntry collection
func (r *CatalogEntriesCollectionRequest) Get(ctx context.Context) ([]CatalogEntry, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CatalogEntry collection
func (r *CatalogEntriesCollectionRequest) Add(ctx context.Context, reqObj *CatalogEntry) (resObj *CatalogEntry, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
