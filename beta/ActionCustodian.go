// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// CustodianActivateRequestParameter undocumented
type CustodianActivateRequestParameter struct {
}

// CustodianReleaseRequestParameter undocumented
type CustodianReleaseRequestParameter struct {
}

// CustodianUpdateIndexRequestParameter undocumented
type CustodianUpdateIndexRequestParameter struct {
}

// SiteSources returns request builder for SiteSource collection
func (b *CustodianRequestBuilder) SiteSources() *CustodianSiteSourcesCollectionRequestBuilder {
	bb := &CustodianSiteSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/siteSources"
	return bb
}

// CustodianSiteSourcesCollectionRequestBuilder is request builder for SiteSource collection
type CustodianSiteSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SiteSource collection
func (b *CustodianSiteSourcesCollectionRequestBuilder) Request() *CustodianSiteSourcesCollectionRequest {
	return &CustodianSiteSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SiteSource item
func (b *CustodianSiteSourcesCollectionRequestBuilder) ID(id string) *SiteSourceRequestBuilder {
	bb := &SiteSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CustodianSiteSourcesCollectionRequest is request for SiteSource collection
type CustodianSiteSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SiteSource collection
func (r *CustodianSiteSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SiteSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SiteSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SiteSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SiteSource collection, max N pages
func (r *CustodianSiteSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SiteSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SiteSource collection
func (r *CustodianSiteSourcesCollectionRequest) Get(ctx context.Context) ([]SiteSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SiteSource collection
func (r *CustodianSiteSourcesCollectionRequest) Add(ctx context.Context, reqObj *SiteSource) (resObj *SiteSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedGroupSources returns request builder for UnifiedGroupSource collection
func (b *CustodianRequestBuilder) UnifiedGroupSources() *CustodianUnifiedGroupSourcesCollectionRequestBuilder {
	bb := &CustodianUnifiedGroupSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/unifiedGroupSources"
	return bb
}

// CustodianUnifiedGroupSourcesCollectionRequestBuilder is request builder for UnifiedGroupSource collection
type CustodianUnifiedGroupSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedGroupSource collection
func (b *CustodianUnifiedGroupSourcesCollectionRequestBuilder) Request() *CustodianUnifiedGroupSourcesCollectionRequest {
	return &CustodianUnifiedGroupSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedGroupSource item
func (b *CustodianUnifiedGroupSourcesCollectionRequestBuilder) ID(id string) *UnifiedGroupSourceRequestBuilder {
	bb := &UnifiedGroupSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CustodianUnifiedGroupSourcesCollectionRequest is request for UnifiedGroupSource collection
type CustodianUnifiedGroupSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedGroupSource collection
func (r *CustodianUnifiedGroupSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedGroupSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedGroupSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedGroupSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedGroupSource collection, max N pages
func (r *CustodianUnifiedGroupSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedGroupSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedGroupSource collection
func (r *CustodianUnifiedGroupSourcesCollectionRequest) Get(ctx context.Context) ([]UnifiedGroupSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedGroupSource collection
func (r *CustodianUnifiedGroupSourcesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedGroupSource) (resObj *UnifiedGroupSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserSources returns request builder for UserSource collection
func (b *CustodianRequestBuilder) UserSources() *CustodianUserSourcesCollectionRequestBuilder {
	bb := &CustodianUserSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userSources"
	return bb
}

// CustodianUserSourcesCollectionRequestBuilder is request builder for UserSource collection
type CustodianUserSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserSource collection
func (b *CustodianUserSourcesCollectionRequestBuilder) Request() *CustodianUserSourcesCollectionRequest {
	return &CustodianUserSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserSource item
func (b *CustodianUserSourcesCollectionRequestBuilder) ID(id string) *UserSourceRequestBuilder {
	bb := &UserSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CustodianUserSourcesCollectionRequest is request for UserSource collection
type CustodianUserSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserSource collection
func (r *CustodianUserSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserSource collection, max N pages
func (r *CustodianUserSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]UserSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserSource collection
func (r *CustodianUserSourcesCollectionRequest) Get(ctx context.Context) ([]UserSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserSource collection
func (r *CustodianUserSourcesCollectionRequest) Add(ctx context.Context, reqObj *UserSource) (resObj *UserSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
