// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// MicrosoftTunnelServerCreateServerLogCollectionRequestObjectRequestParameter undocumented
type MicrosoftTunnelServerCreateServerLogCollectionRequestObjectRequestParameter struct {
	// StartDateTime undocumented
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	// EndDateTime undocumented
	EndDateTime *time.Time `json:"endDateTime,omitempty"`
}

// MicrosoftTunnelServerGetHealthMetricsRequestParameter undocumented
type MicrosoftTunnelServerGetHealthMetricsRequestParameter struct {
	// MetricNames undocumented
	MetricNames []string `json:"metricNames,omitempty"`
}

// MicrosoftTunnelServerGetHealthMetricTimeSeriesRequestParameter undocumented
type MicrosoftTunnelServerGetHealthMetricTimeSeriesRequestParameter struct {
	// MetricName undocumented
	MetricName *string `json:"metricName,omitempty"`
	// StartTime undocumented
	StartTime *time.Time `json:"startTime,omitempty"`
	// EndTime undocumented
	EndTime *time.Time `json:"endTime,omitempty"`
}

// MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequestParameter undocumented
type MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequestParameter struct {
}

// MicrosoftTunnelSiteRequestUpgradeRequestParameter undocumented
type MicrosoftTunnelSiteRequestUpgradeRequestParameter struct {
}

// Device is navigation property
func (b *MicrosoftAuthenticatorAuthenticationMethodRequestBuilder) Device() *DeviceRequestBuilder {
	bb := &DeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/device"
	return bb
}

// IncludeTargets returns request builder for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (b *MicrosoftAuthenticatorAuthenticationMethodConfigurationRequestBuilder) IncludeTargets() *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder {
	bb := &MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/includeTargets"
	return bb
}

// MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethodTarget collection
type MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (b *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) Request() *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest {
	return &MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftAuthenticatorAuthenticationMethodTarget item
func (b *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) ID(id string) *MicrosoftAuthenticatorAuthenticationMethodTargetRequestBuilder {
	bb := &MicrosoftAuthenticatorAuthenticationMethodTargetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest is request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
type MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftAuthenticatorAuthenticationMethodTarget, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftAuthenticatorAuthenticationMethodTarget
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftAuthenticatorAuthenticationMethodTarget
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftAuthenticatorAuthenticationMethodTarget collection, max N pages
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftAuthenticatorAuthenticationMethodTarget, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Get(ctx context.Context) ([]MicrosoftAuthenticatorAuthenticationMethodTarget, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethodTarget) (resObj *MicrosoftAuthenticatorAuthenticationMethodTarget, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ContainedApps returns request builder for MobileContainedApp collection
func (b *MicrosoftStoreForBusinessAppRequestBuilder) ContainedApps() *MicrosoftStoreForBusinessAppContainedAppsCollectionRequestBuilder {
	bb := &MicrosoftStoreForBusinessAppContainedAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/containedApps"
	return bb
}

// MicrosoftStoreForBusinessAppContainedAppsCollectionRequestBuilder is request builder for MobileContainedApp collection
type MicrosoftStoreForBusinessAppContainedAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobileContainedApp collection
func (b *MicrosoftStoreForBusinessAppContainedAppsCollectionRequestBuilder) Request() *MicrosoftStoreForBusinessAppContainedAppsCollectionRequest {
	return &MicrosoftStoreForBusinessAppContainedAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobileContainedApp item
func (b *MicrosoftStoreForBusinessAppContainedAppsCollectionRequestBuilder) ID(id string) *MobileContainedAppRequestBuilder {
	bb := &MobileContainedAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MicrosoftStoreForBusinessAppContainedAppsCollectionRequest is request for MobileContainedApp collection
type MicrosoftStoreForBusinessAppContainedAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobileContainedApp collection
func (r *MicrosoftStoreForBusinessAppContainedAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobileContainedApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobileContainedApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobileContainedApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobileContainedApp collection, max N pages
func (r *MicrosoftStoreForBusinessAppContainedAppsCollectionRequest) GetN(ctx context.Context, n int) ([]MobileContainedApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobileContainedApp collection
func (r *MicrosoftStoreForBusinessAppContainedAppsCollectionRequest) Get(ctx context.Context) ([]MobileContainedApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobileContainedApp collection
func (r *MicrosoftStoreForBusinessAppContainedAppsCollectionRequest) Add(ctx context.Context, reqObj *MobileContainedApp) (resObj *MobileContainedApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftTunnelConfiguration is navigation property
func (b *MicrosoftTunnelSiteRequestBuilder) MicrosoftTunnelConfiguration() *MicrosoftTunnelConfigurationRequestBuilder {
	bb := &MicrosoftTunnelConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/microsoftTunnelConfiguration"
	return bb
}

// MicrosoftTunnelServers returns request builder for MicrosoftTunnelServer collection
func (b *MicrosoftTunnelSiteRequestBuilder) MicrosoftTunnelServers() *MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequestBuilder {
	bb := &MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/microsoftTunnelServers"
	return bb
}

// MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequestBuilder is request builder for MicrosoftTunnelServer collection
type MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftTunnelServer collection
func (b *MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequestBuilder) Request() *MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequest {
	return &MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftTunnelServer item
func (b *MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequestBuilder) ID(id string) *MicrosoftTunnelServerRequestBuilder {
	bb := &MicrosoftTunnelServerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequest is request for MicrosoftTunnelServer collection
type MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftTunnelServer collection
func (r *MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftTunnelServer, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftTunnelServer
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftTunnelServer
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftTunnelServer collection, max N pages
func (r *MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftTunnelServer, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftTunnelServer collection
func (r *MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequest) Get(ctx context.Context) ([]MicrosoftTunnelServer, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftTunnelServer collection
func (r *MicrosoftTunnelSiteMicrosoftTunnelServersCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftTunnelServer) (resObj *MicrosoftTunnelServer, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
