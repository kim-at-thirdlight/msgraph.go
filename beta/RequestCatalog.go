// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// CatalogRequestBuilder is request builder for Catalog
type CatalogRequestBuilder struct{ BaseRequestBuilder }

// Request returns CatalogRequest
func (b *CatalogRequestBuilder) Request() *CatalogRequest {
	return &CatalogRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// CatalogRequest is request for Catalog
type CatalogRequest struct{ BaseRequest }

// Get performs GET request for Catalog
func (r *CatalogRequest) Get(ctx context.Context) (resObj *Catalog, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Catalog
func (r *CatalogRequest) Update(ctx context.Context, reqObj *Catalog) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Catalog
func (r *CatalogRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// CatalogEntryRequestBuilder is request builder for CatalogEntry
type CatalogEntryRequestBuilder struct{ BaseRequestBuilder }

// Request returns CatalogEntryRequest
func (b *CatalogEntryRequestBuilder) Request() *CatalogEntryRequest {
	return &CatalogEntryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// CatalogEntryRequest is request for CatalogEntry
type CatalogEntryRequest struct{ BaseRequest }

// Get performs GET request for CatalogEntry
func (r *CatalogEntryRequest) Get(ctx context.Context) (resObj *CatalogEntry, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for CatalogEntry
func (r *CatalogEntryRequest) Update(ctx context.Context, reqObj *CatalogEntry) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for CatalogEntry
func (r *CatalogEntryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
