// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// AccessPackageRequestBuilder is request builder for AccessPackage
type AccessPackageRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageRequest
func (b *AccessPackageRequestBuilder) Request() *AccessPackageRequest {
	return &AccessPackageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageRequest is request for AccessPackage
type AccessPackageRequest struct{ BaseRequest }

// Get performs GET request for AccessPackage
func (r *AccessPackageRequest) Get(ctx context.Context) (resObj *AccessPackage, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackage
func (r *AccessPackageRequest) Update(ctx context.Context, reqObj *AccessPackage) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackage
func (r *AccessPackageRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentRequestBuilder is request builder for AccessPackageAssignment
type AccessPackageAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentRequest
func (b *AccessPackageAssignmentRequestBuilder) Request() *AccessPackageAssignmentRequest {
	return &AccessPackageAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentRequest is request for AccessPackageAssignment
type AccessPackageAssignmentRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignment
func (r *AccessPackageAssignmentRequest) Get(ctx context.Context) (resObj *AccessPackageAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignment
func (r *AccessPackageAssignmentRequest) Update(ctx context.Context, reqObj *AccessPackageAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignment
func (r *AccessPackageAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentPolicyRequestBuilder is request builder for AccessPackageAssignmentPolicy
type AccessPackageAssignmentPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentPolicyRequest
func (b *AccessPackageAssignmentPolicyRequestBuilder) Request() *AccessPackageAssignmentPolicyRequest {
	return &AccessPackageAssignmentPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentPolicyRequest is request for AccessPackageAssignmentPolicy
type AccessPackageAssignmentPolicyRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentPolicy
func (r *AccessPackageAssignmentPolicyRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentPolicy
func (r *AccessPackageAssignmentPolicyRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentPolicy
func (r *AccessPackageAssignmentPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentRequestObjectRequestBuilder is request builder for AccessPackageAssignmentRequestObject
type AccessPackageAssignmentRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentRequestObjectRequest
func (b *AccessPackageAssignmentRequestObjectRequestBuilder) Request() *AccessPackageAssignmentRequestObjectRequest {
	return &AccessPackageAssignmentRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentRequestObjectRequest is request for AccessPackageAssignmentRequestObject
type AccessPackageAssignmentRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentRequestObject
func (r *AccessPackageAssignmentRequestObjectRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentRequestObject
func (r *AccessPackageAssignmentRequestObjectRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentRequestObject
func (r *AccessPackageAssignmentRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentResourceRoleRequestBuilder is request builder for AccessPackageAssignmentResourceRole
type AccessPackageAssignmentResourceRoleRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentResourceRoleRequest
func (b *AccessPackageAssignmentResourceRoleRequestBuilder) Request() *AccessPackageAssignmentResourceRoleRequest {
	return &AccessPackageAssignmentResourceRoleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentResourceRoleRequest is request for AccessPackageAssignmentResourceRole
type AccessPackageAssignmentResourceRoleRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentResourceRole
func (r *AccessPackageAssignmentResourceRoleRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentResourceRole, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentResourceRole
func (r *AccessPackageAssignmentResourceRoleRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentResourceRole) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentResourceRole
func (r *AccessPackageAssignmentResourceRoleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageCatalogRequestBuilder is request builder for AccessPackageCatalog
type AccessPackageCatalogRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageCatalogRequest
func (b *AccessPackageCatalogRequestBuilder) Request() *AccessPackageCatalogRequest {
	return &AccessPackageCatalogRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageCatalogRequest is request for AccessPackageCatalog
type AccessPackageCatalogRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageCatalog
func (r *AccessPackageCatalogRequest) Get(ctx context.Context) (resObj *AccessPackageCatalog, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageCatalog
func (r *AccessPackageCatalogRequest) Update(ctx context.Context, reqObj *AccessPackageCatalog) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageCatalog
func (r *AccessPackageCatalogRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceRequestBuilder is request builder for AccessPackageResource
type AccessPackageResourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceRequest
func (b *AccessPackageResourceRequestBuilder) Request() *AccessPackageResourceRequest {
	return &AccessPackageResourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceRequest is request for AccessPackageResource
type AccessPackageResourceRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResource
func (r *AccessPackageResourceRequest) Get(ctx context.Context) (resObj *AccessPackageResource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResource
func (r *AccessPackageResourceRequest) Update(ctx context.Context, reqObj *AccessPackageResource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResource
func (r *AccessPackageResourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceEnvironmentRequestBuilder is request builder for AccessPackageResourceEnvironment
type AccessPackageResourceEnvironmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceEnvironmentRequest
func (b *AccessPackageResourceEnvironmentRequestBuilder) Request() *AccessPackageResourceEnvironmentRequest {
	return &AccessPackageResourceEnvironmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceEnvironmentRequest is request for AccessPackageResourceEnvironment
type AccessPackageResourceEnvironmentRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceEnvironment
func (r *AccessPackageResourceEnvironmentRequest) Get(ctx context.Context) (resObj *AccessPackageResourceEnvironment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceEnvironment
func (r *AccessPackageResourceEnvironmentRequest) Update(ctx context.Context, reqObj *AccessPackageResourceEnvironment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceEnvironment
func (r *AccessPackageResourceEnvironmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceRequestObjectRequestBuilder is request builder for AccessPackageResourceRequestObject
type AccessPackageResourceRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceRequestObjectRequest
func (b *AccessPackageResourceRequestObjectRequestBuilder) Request() *AccessPackageResourceRequestObjectRequest {
	return &AccessPackageResourceRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceRequestObjectRequest is request for AccessPackageResourceRequestObject
type AccessPackageResourceRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceRequestObject
func (r *AccessPackageResourceRequestObjectRequest) Get(ctx context.Context) (resObj *AccessPackageResourceRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceRequestObject
func (r *AccessPackageResourceRequestObjectRequest) Update(ctx context.Context, reqObj *AccessPackageResourceRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceRequestObject
func (r *AccessPackageResourceRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceRoleRequestBuilder is request builder for AccessPackageResourceRole
type AccessPackageResourceRoleRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceRoleRequest
func (b *AccessPackageResourceRoleRequestBuilder) Request() *AccessPackageResourceRoleRequest {
	return &AccessPackageResourceRoleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceRoleRequest is request for AccessPackageResourceRole
type AccessPackageResourceRoleRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceRole
func (r *AccessPackageResourceRoleRequest) Get(ctx context.Context) (resObj *AccessPackageResourceRole, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceRole
func (r *AccessPackageResourceRoleRequest) Update(ctx context.Context, reqObj *AccessPackageResourceRole) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceRole
func (r *AccessPackageResourceRoleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceRoleScopeRequestBuilder is request builder for AccessPackageResourceRoleScope
type AccessPackageResourceRoleScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceRoleScopeRequest
func (b *AccessPackageResourceRoleScopeRequestBuilder) Request() *AccessPackageResourceRoleScopeRequest {
	return &AccessPackageResourceRoleScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceRoleScopeRequest is request for AccessPackageResourceRoleScope
type AccessPackageResourceRoleScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceRoleScope
func (r *AccessPackageResourceRoleScopeRequest) Get(ctx context.Context) (resObj *AccessPackageResourceRoleScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceRoleScope
func (r *AccessPackageResourceRoleScopeRequest) Update(ctx context.Context, reqObj *AccessPackageResourceRoleScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceRoleScope
func (r *AccessPackageResourceRoleScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceScopeRequestBuilder is request builder for AccessPackageResourceScope
type AccessPackageResourceScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceScopeRequest
func (b *AccessPackageResourceScopeRequestBuilder) Request() *AccessPackageResourceScopeRequest {
	return &AccessPackageResourceScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceScopeRequest is request for AccessPackageResourceScope
type AccessPackageResourceScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceScope
func (r *AccessPackageResourceScopeRequest) Get(ctx context.Context) (resObj *AccessPackageResourceScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceScope
func (r *AccessPackageResourceScopeRequest) Update(ctx context.Context, reqObj *AccessPackageResourceScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceScope
func (r *AccessPackageResourceScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageSubjectRequestBuilder is request builder for AccessPackageSubject
type AccessPackageSubjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageSubjectRequest
func (b *AccessPackageSubjectRequestBuilder) Request() *AccessPackageSubjectRequest {
	return &AccessPackageSubjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageSubjectRequest is request for AccessPackageSubject
type AccessPackageSubjectRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageSubject
func (r *AccessPackageSubjectRequest) Get(ctx context.Context) (resObj *AccessPackageSubject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageSubject
func (r *AccessPackageSubjectRequest) Update(ctx context.Context, reqObj *AccessPackageSubject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageSubject
func (r *AccessPackageSubjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewRequestBuilder is request builder for AccessReview
type AccessReviewRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewRequest
func (b *AccessReviewRequestBuilder) Request() *AccessReviewRequest {
	return &AccessReviewRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewRequest is request for AccessReview
type AccessReviewRequest struct{ BaseRequest }

// Get performs GET request for AccessReview
func (r *AccessReviewRequest) Get(ctx context.Context) (resObj *AccessReview, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReview
func (r *AccessReviewRequest) Update(ctx context.Context, reqObj *AccessReview) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReview
func (r *AccessReviewRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewDecisionRequestBuilder is request builder for AccessReviewDecision
type AccessReviewDecisionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewDecisionRequest
func (b *AccessReviewDecisionRequestBuilder) Request() *AccessReviewDecisionRequest {
	return &AccessReviewDecisionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewDecisionRequest is request for AccessReviewDecision
type AccessReviewDecisionRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewDecision
func (r *AccessReviewDecisionRequest) Get(ctx context.Context) (resObj *AccessReviewDecision, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewDecision
func (r *AccessReviewDecisionRequest) Update(ctx context.Context, reqObj *AccessReviewDecision) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewDecision
func (r *AccessReviewDecisionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewHistoryDefinitionRequestBuilder is request builder for AccessReviewHistoryDefinition
type AccessReviewHistoryDefinitionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewHistoryDefinitionRequest
func (b *AccessReviewHistoryDefinitionRequestBuilder) Request() *AccessReviewHistoryDefinitionRequest {
	return &AccessReviewHistoryDefinitionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewHistoryDefinitionRequest is request for AccessReviewHistoryDefinition
type AccessReviewHistoryDefinitionRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewHistoryDefinition
func (r *AccessReviewHistoryDefinitionRequest) Get(ctx context.Context) (resObj *AccessReviewHistoryDefinition, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewHistoryDefinition
func (r *AccessReviewHistoryDefinitionRequest) Update(ctx context.Context, reqObj *AccessReviewHistoryDefinition) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewHistoryDefinition
func (r *AccessReviewHistoryDefinitionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceRequestBuilder is request builder for AccessReviewInstance
type AccessReviewInstanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceRequest
func (b *AccessReviewInstanceRequestBuilder) Request() *AccessReviewInstanceRequest {
	return &AccessReviewInstanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceRequest is request for AccessReviewInstance
type AccessReviewInstanceRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstance
func (r *AccessReviewInstanceRequest) Get(ctx context.Context) (resObj *AccessReviewInstance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstance
func (r *AccessReviewInstanceRequest) Update(ctx context.Context, reqObj *AccessReviewInstance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstance
func (r *AccessReviewInstanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceDecisionItemRequestBuilder is request builder for AccessReviewInstanceDecisionItem
type AccessReviewInstanceDecisionItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceDecisionItemRequest
func (b *AccessReviewInstanceDecisionItemRequestBuilder) Request() *AccessReviewInstanceDecisionItemRequest {
	return &AccessReviewInstanceDecisionItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceDecisionItemRequest is request for AccessReviewInstanceDecisionItem
type AccessReviewInstanceDecisionItemRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstanceDecisionItem
func (r *AccessReviewInstanceDecisionItemRequest) Get(ctx context.Context) (resObj *AccessReviewInstanceDecisionItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstanceDecisionItem
func (r *AccessReviewInstanceDecisionItemRequest) Update(ctx context.Context, reqObj *AccessReviewInstanceDecisionItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstanceDecisionItem
func (r *AccessReviewInstanceDecisionItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewPolicyRequestBuilder is request builder for AccessReviewPolicy
type AccessReviewPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewPolicyRequest
func (b *AccessReviewPolicyRequestBuilder) Request() *AccessReviewPolicyRequest {
	return &AccessReviewPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewPolicyRequest is request for AccessReviewPolicy
type AccessReviewPolicyRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewPolicy
func (r *AccessReviewPolicyRequest) Get(ctx context.Context) (resObj *AccessReviewPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewPolicy
func (r *AccessReviewPolicyRequest) Update(ctx context.Context, reqObj *AccessReviewPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewPolicy
func (r *AccessReviewPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewReviewerRequestBuilder is request builder for AccessReviewReviewer
type AccessReviewReviewerRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewReviewerRequest
func (b *AccessReviewReviewerRequestBuilder) Request() *AccessReviewReviewerRequest {
	return &AccessReviewReviewerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewReviewerRequest is request for AccessReviewReviewer
type AccessReviewReviewerRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewReviewer
func (r *AccessReviewReviewerRequest) Get(ctx context.Context) (resObj *AccessReviewReviewer, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewReviewer
func (r *AccessReviewReviewerRequest) Update(ctx context.Context, reqObj *AccessReviewReviewer) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewReviewer
func (r *AccessReviewReviewerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewScheduleDefinitionRequestBuilder is request builder for AccessReviewScheduleDefinition
type AccessReviewScheduleDefinitionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewScheduleDefinitionRequest
func (b *AccessReviewScheduleDefinitionRequestBuilder) Request() *AccessReviewScheduleDefinitionRequest {
	return &AccessReviewScheduleDefinitionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewScheduleDefinitionRequest is request for AccessReviewScheduleDefinition
type AccessReviewScheduleDefinitionRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewScheduleDefinition
func (r *AccessReviewScheduleDefinitionRequest) Get(ctx context.Context) (resObj *AccessReviewScheduleDefinition, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewScheduleDefinition
func (r *AccessReviewScheduleDefinitionRequest) Update(ctx context.Context, reqObj *AccessReviewScheduleDefinition) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewScheduleDefinition
func (r *AccessReviewScheduleDefinitionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewSetRequestBuilder is request builder for AccessReviewSet
type AccessReviewSetRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewSetRequest
func (b *AccessReviewSetRequestBuilder) Request() *AccessReviewSetRequest {
	return &AccessReviewSetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewSetRequest is request for AccessReviewSet
type AccessReviewSetRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewSet
func (r *AccessReviewSetRequest) Get(ctx context.Context) (resObj *AccessReviewSet, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewSet
func (r *AccessReviewSetRequest) Update(ctx context.Context, reqObj *AccessReviewSet) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewSet
func (r *AccessReviewSetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
