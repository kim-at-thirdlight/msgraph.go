// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// ReviewSetAddToReviewSetRequestParameter undocumented
type ReviewSetAddToReviewSetRequestParameter struct {
	// SourceCollection undocumented
	SourceCollection *SourceCollection `json:"sourceCollection,omitempty"`
	// AdditionalData undocumented
	AdditionalData *AdditionalDataOptions `json:"additionalData,omitempty"`
}

// ReviewSetExportRequestParameter undocumented
type ReviewSetExportRequestParameter struct {
	// OutputName undocumented
	OutputName *string `json:"outputName,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
	// AzureBlobContainer undocumented
	AzureBlobContainer *string `json:"azureBlobContainer,omitempty"`
	// AzureBlobToken undocumented
	AzureBlobToken *string `json:"azureBlobToken,omitempty"`
	// ExportOptions undocumented
	ExportOptions *ExportOptions `json:"exportOptions,omitempty"`
	// ExportStructure undocumented
	ExportStructure *ExportFileStructure `json:"exportStructure,omitempty"`
}

// ReviewSetQueryApplyTagsRequestParameter undocumented
type ReviewSetQueryApplyTagsRequestParameter struct {
	// TagsToAdd undocumented
	TagsToAdd []Tag `json:"tagsToAdd,omitempty"`
	// TagsToRemove undocumented
	TagsToRemove []Tag `json:"tagsToRemove,omitempty"`
}

// Queries returns request builder for ReviewSetQuery collection
func (b *ReviewSetRequestBuilder) Queries() *ReviewSetQueriesCollectionRequestBuilder {
	bb := &ReviewSetQueriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/queries"
	return bb
}

// ReviewSetQueriesCollectionRequestBuilder is request builder for ReviewSetQuery collection
type ReviewSetQueriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ReviewSetQuery collection
func (b *ReviewSetQueriesCollectionRequestBuilder) Request() *ReviewSetQueriesCollectionRequest {
	return &ReviewSetQueriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ReviewSetQuery item
func (b *ReviewSetQueriesCollectionRequestBuilder) ID(id string) *ReviewSetQueryRequestBuilder {
	bb := &ReviewSetQueryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReviewSetQueriesCollectionRequest is request for ReviewSetQuery collection
type ReviewSetQueriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ReviewSetQuery collection
func (r *ReviewSetQueriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ReviewSetQuery, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ReviewSetQuery
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ReviewSetQuery
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ReviewSetQuery collection, max N pages
func (r *ReviewSetQueriesCollectionRequest) GetN(ctx context.Context, n int) ([]ReviewSetQuery, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ReviewSetQuery collection
func (r *ReviewSetQueriesCollectionRequest) Get(ctx context.Context) ([]ReviewSetQuery, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ReviewSetQuery collection
func (r *ReviewSetQueriesCollectionRequest) Add(ctx context.Context, reqObj *ReviewSetQuery) (resObj *ReviewSetQuery, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
